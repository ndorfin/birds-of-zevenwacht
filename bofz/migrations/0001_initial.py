# Generated by Django 5.1.6 on 2025-08-06 15:56

import bofz.models.photo
import bofz.models.red_list_level
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_comment="Helps identify the general area a sighting or photo will be bound by. Areas are useful to obfuscate sightings taken from a Person's home.", default='', help_text='The name of this gated community, farm, or other', max_length=32, verbose_name='Name')),
                ('url', models.URLField(db_comment='Provides a reference link to the Area', help_text='Does this Area have a representative website?', max_length=64, null=True, verbose_name='Website')),
                ('street', models.CharField(db_comment='Used with the suburb to build up a physical address', default='', help_text='What is the street name and number for the entrance to this Area?', max_length=32, null=True, verbose_name='Street name and number')),
                ('suburb', models.CharField(db_comment='Used with the street address to build up a physical address', default='Kuils River', help_text='What is the suburb or municipality of this Area', max_length=32, null=True, verbose_name='Suburb')),
                ('entrance', models.JSONField(help_text='The GPS location (in GeoJSON) of the entrance of this Area. Use https://geojson.io/', verbose_name='Entrance (GeoJSON)')),
                ('centre', models.JSONField(help_text='The GPS location (in GeoJSON) of the centre of this Area. Use https://geojson.io/', verbose_name='Centre (GeoJSON)')),
                ('boundaries', models.JSONField(help_text='Supply the GeoJSON of coordinates that creates the outer boundary of the Area. Use https://geojson.io/', verbose_name='Boundary (GeoJSON) or GeoFence')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exif_identifier', models.CharField(default='', help_text="The combination of manufacturer and model used in the Photo's EXIF data to identify this Camera, e.g. Canon-Canon EOS 500D", max_length=32, verbose_name='EXIF identifier')),
                ('manufacturer', models.CharField(default='', help_text="The name of the Camera's brand or manufacturer, e.g. Apple", max_length=32, verbose_name='Manufacturer')),
                ('model_name', models.CharField(default='', help_text="The name of the Camera's model, e.g. EOS 5D Mark II", max_length=32, verbose_name='Model')),
            ],
        ),
        migrations.CreateModel(
            name='RedListLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('severity', models.PositiveIntegerField(db_comment='How severe is this level?', help_text='Where 1 = CR/Critically endangered and 5 = LC/Least Concern', verbose_name='Severity rank')),
                ('abbreviation', models.CharField(db_comment='The abbreviated form of this RedList level', help_text='2 characters or less', max_length=2, verbose_name='Abbreviation')),
                ('label', models.CharField(db_comment='The longer form of the abbreviation', help_text='The human readable name for this RedList level', max_length=32, verbose_name='Label')),
            ],
            options={
                'ordering': ['severity'],
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('short_name', models.CharField(max_length=16)),
                ('full_name', models.CharField(max_length=64, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(db_comment='We need a to-the-minute recording of the time and date of this photo', help_text='What date and time was this photo taken at?', verbose_name='Date and time of photo')),
                ('source_photo', models.ImageField(default='', upload_to=bofz.models.photo.person_id_folder_path, verbose_name='Source photo')),
                ('description', models.CharField(db_comment='This plain text will act as alternative text for the image', default='', help_text='Describe this photo, as if you were describing it over the phone to someone', max_length=256, verbose_name='Description')),
                ('photographer', models.ForeignKey(default=1, help_text='Who took this Photo?', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='Bird',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genus', models.CharField(default='', help_text="The scientific name of their genus, e.g. 'Anthropoides'", max_length=64, verbose_name='Genus')),
                ('species', models.CharField(default='', help_text="The scientific name of their species, usually lowercase. e.g. 'paradiseus'", max_length=64, verbose_name='Species')),
                ('family', models.CharField(default='', help_text="Common name of this species' family or grouping, e.g. 'Crane'", max_length=32, verbose_name='Family name')),
                ('common_name', models.CharField(db_comment="English common name for this species. e.g. 'Blue Crane'", default='', help_text='e.g. Blue Crane', max_length=64, verbose_name='Common name')),
                ('afrikaans_name', models.CharField(blank=True, db_comment="Afrikaans common name for this species, e.g. 'Blou Kraanvoël'", default='', help_text='e.g. Blou Kraanvoël', max_length=64, verbose_name='Afrikaans name')),
                ('german_name', models.CharField(blank=True, db_comment="German common name for this species, e.g. 'Paradieskranich'", default='', help_text='e.g. Paradieskranich', max_length=64, verbose_name='German name')),
                ('ebird', models.URLField(blank=True, db_comment='Useful as a reference for this bird', default='', help_text='e.g. https://ebird.org/species/blucra2/ZA', max_length=64, verbose_name='eBird URL')),
                ('wikipedia', models.URLField(blank=True, db_comment='Useful as a reference for this bird', default='', help_text='e.g. https://en.wikipedia.org/wiki/Blue_crane', max_length=64, verbose_name='Wikipedia URL')),
                ('sighted', models.BooleanField(db_comment="We'll use this to determine the bird's visibility in lists and counts", default=False, help_text='Does this bird have any Sightings associated with it?', verbose_name='Sighted')),
                ('photographed', models.BooleanField(db_comment="We'll use this to determine the bird's visibility in lists and counts", default=False, help_text='Does this bird have any Photos associated with it?', verbose_name='Photographed')),
                ('potential', models.BooleanField(db_comment="This will mostly be driven by the bird's inclusion in a SpeciesList", default=False, help_text='Does this Bird have potential to be sighted in these Areas', verbose_name='Potential')),
                ('redlist_level', models.ForeignKey(default=bofz.models.red_list_level.RedListLevel.get_default_pk, on_delete=django.db.models.deletion.CASCADE, to='bofz.redlistlevel')),
            ],
            options={
                'ordering': ['family', 'common_name'],
            },
        ),
        migrations.CreateModel(
            name='Sighting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datetime', models.DateTimeField(db_comment="We need a to-the-minute recording of the time and date of this sighting. We can potentially infer this from any supporting photos' EXIF data.", help_text='What date and time was this sighting?', verbose_name='Date and time of sighting')),
                ('quantity', models.PositiveIntegerField(db_comment='We need numbers of the species', default=1, help_text='How many total individuals of this species were seen?', verbose_name='Quantity')),
                ('area', models.ForeignKey(help_text='Which Area was this Sighting recorded in?', on_delete=django.db.models.deletion.CASCADE, to='bofz.area')),
                ('bird', models.ForeignKey(default='', help_text='Select the species you observed in this Sighting', on_delete=django.db.models.deletion.CASCADE, to='bofz.bird')),
                ('observers', models.ManyToManyField(help_text='Who observed these birds?', to=settings.AUTH_USER_MODEL)),
                ('photos', models.ManyToManyField(blank=True, help_text='Select the optional Photos associated with this Sighting', to='bofz.photo')),
            ],
            options={
                'ordering': ['-datetime'],
            },
        ),
        migrations.CreateModel(
            name='SpeciesList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text="What is this list's name, or who supplied this list?", max_length=32, verbose_name='Name')),
                ('url', models.URLField(db_comment='Any reference we can provide for this source is valuable', help_text='The canonical reference of this list on the Web', max_length=64, null=True, verbose_name='URL or reference site')),
                ('author', models.CharField(db_comment='Identify the responsible authors of this list', default='', help_text='Which individual or group/organisation created this list?', max_length=32, verbose_name='Author or Organisation')),
                ('birds', models.ManyToManyField(help_text='All the birds contained in this list', to='bofz.bird')),
            ],
        ),
    ]
